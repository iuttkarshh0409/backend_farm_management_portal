"""SQLite compatible migration

Revision ID: fbec516ba9ab
Revises: 
Create Date: 2025-09-18 18:10:40.343236

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'fbec516ba9ab'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('phone', sa.String(length=15), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('user_type', sa.Enum('FARMER', 'VETERINARIAN', 'ADMIN', name='userrole'), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'PENDING', 'SUSPENDED', name='userstatus'), nullable=False),
    sa.Column('email_verified', sa.Boolean(), nullable=False),
    sa.Column('phone_verified', sa.Boolean(), nullable=False),
    sa.Column('otp_code', sa.String(length=6), nullable=True),
    sa.Column('otp_created_at', sa.DateTime(), nullable=True),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('profile_image', sa.String(length=255), nullable=True),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_phone'), ['phone'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_user_type'), ['user_type'], unique=False)

    op.create_table('admins',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('employee_id', sa.String(length=50), nullable=True),
    sa.Column('department', sa.String(length=100), nullable=True),
    sa.Column('designation', sa.String(length=100), nullable=True),
    sa.Column('permissions', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('employee_id')
    )
    op.create_table('farmers',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('aadhar_no', sa.String(length=12), nullable=True),
    sa.Column('farm_name', sa.String(length=150), nullable=True),
    sa.Column('farm_size', sa.String(length=50), nullable=True),
    sa.Column('farm_type', sa.String(length=50), nullable=True),
    sa.Column('registration_number', sa.String(length=50), nullable=True),
    sa.Column('district', sa.String(length=100), nullable=True),
    sa.Column('state', sa.String(length=100), nullable=True),
    sa.Column('pincode', sa.String(length=10), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('registration_number')
    )
    with op.batch_alter_table('farmers', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_farmers_aadhar_no'), ['aadhar_no'], unique=True)

    op.create_table('veterinarians',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('license_no', sa.String(length=50), nullable=False),
    sa.Column('specialization', sa.String(length=100), nullable=True),
    sa.Column('qualification', sa.String(length=200), nullable=True),
    sa.Column('experience_years', sa.Integer(), nullable=True),
    sa.Column('clinic_name', sa.String(length=150), nullable=True),
    sa.Column('clinic_address', sa.Text(), nullable=True),
    sa.Column('consultation_fee', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('veterinarians', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_veterinarians_license_no'), ['license_no'], unique=True)

    op.create_table('animals',
    sa.Column('tag_id', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('species', sa.Enum('CATTLE', 'BUFFALO', 'GOAT', 'SHEEP', 'POULTRY', 'SWINE', 'OTHER', name='animalspecies'), nullable=False),
    sa.Column('breed', sa.String(length=100), nullable=True),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', name='gender'), nullable=False),
    sa.Column('age_months', sa.Integer(), nullable=True),
    sa.Column('birth_date', sa.Date(), nullable=True),
    sa.Column('weight_kg', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('height_cm', sa.Numeric(precision=6, scale=2), nullable=True),
    sa.Column('color', sa.String(length=100), nullable=True),
    sa.Column('health_status', sa.Enum('HEALTHY', 'SICK', 'UNDER_TREATMENT', 'RECOVERING', 'QUARANTINE', 'DECEASED', name='healthstatus'), nullable=False),
    sa.Column('production_status', sa.Enum('ACTIVE', 'DRY', 'PREGNANT', 'LACTATING', 'BREEDING', 'RETIRED', name='productionstatus'), nullable=True),
    sa.Column('farmer_id', sa.String(length=36), nullable=False),
    sa.Column('veterinarian_id', sa.String(length=36), nullable=True),
    sa.Column('purchase_date', sa.Date(), nullable=True),
    sa.Column('purchase_price', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('source', sa.String(length=200), nullable=True),
    sa.Column('vaccination_status', sa.Text(), nullable=True),
    sa.Column('last_checkup_date', sa.Date(), nullable=True),
    sa.Column('daily_milk_yield', sa.Numeric(precision=6, scale=2), nullable=True),
    sa.Column('lactation_number', sa.Integer(), nullable=True),
    sa.Column('last_calving_date', sa.Date(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('special_conditions', sa.Text(), nullable=True),
    sa.Column('image_path', sa.String(length=255), nullable=True),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['farmer_id'], ['farmers.id'], ),
    sa.ForeignKeyConstraint(['veterinarian_id'], ['veterinarians.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('animals', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_animals_farmer_id'), ['farmer_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_animals_species'), ['species'], unique=False)
        batch_op.create_index(batch_op.f('ix_animals_tag_id'), ['tag_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_animals_veterinarian_id'), ['veterinarian_id'], unique=False)

    op.create_table('health_records',
    sa.Column('animal_id', sa.String(length=36), nullable=False),
    sa.Column('recorded_by_id', sa.String(length=36), nullable=False),
    sa.Column('checkup_date', sa.Date(), nullable=False),
    sa.Column('temperature', sa.Numeric(precision=4, scale=2), nullable=True),
    sa.Column('weight_kg', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('heart_rate', sa.Integer(), nullable=True),
    sa.Column('respiratory_rate', sa.Integer(), nullable=True),
    sa.Column('symptoms', sa.Text(), nullable=True),
    sa.Column('diagnosis', sa.Text(), nullable=True),
    sa.Column('treatment_given', sa.Text(), nullable=True),
    sa.Column('next_checkup_date', sa.Date(), nullable=True),
    sa.Column('recommendations', sa.Text(), nullable=True),
    sa.Column('overall_condition', sa.Enum('HEALTHY', 'SICK', 'UNDER_TREATMENT', 'RECOVERING', 'QUARANTINE', 'DECEASED', name='healthstatus'), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['animal_id'], ['animals.id'], ),
    sa.ForeignKeyConstraint(['recorded_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('health_records', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_health_records_animal_id'), ['animal_id'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('health_records', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_health_records_animal_id'))

    op.drop_table('health_records')
    with op.batch_alter_table('animals', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_animals_veterinarian_id'))
        batch_op.drop_index(batch_op.f('ix_animals_tag_id'))
        batch_op.drop_index(batch_op.f('ix_animals_species'))
        batch_op.drop_index(batch_op.f('ix_animals_farmer_id'))

    op.drop_table('animals')
    with op.batch_alter_table('veterinarians', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_veterinarians_license_no'))

    op.drop_table('veterinarians')
    with op.batch_alter_table('farmers', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_farmers_aadhar_no'))

    op.drop_table('farmers')
    op.drop_table('admins')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_user_type'))
        batch_op.drop_index(batch_op.f('ix_users_phone'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    # ### end Alembic commands ###
